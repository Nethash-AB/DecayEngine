using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace DecayEngine.TypingsGenerator.Model
{
    public class Global
    {
        private readonly List<DocumentableObject> _members;

        public Global()
        {
            _members = new List<DocumentableObject>();
        }

        public void Add(DocumentableObject obj)
        {
            _members.Add(obj);
        }

        public void AddRange(IEnumerable<DocumentableObject> objs)
        {
            _members.AddRange(objs);
        }

        public void Remove(DocumentableObject obj)
        {
            _members.Remove(obj);
        }

        public void Clear()
        {
            _members.Clear();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"// Type definitions for Decay Engine Scripting Environment");
            sb.AppendLine($"// Project: Decay Engine");
            sb.AppendLine($"// Definitions by: Nethash\u2122 <https://nethash.se>");
            sb.AppendLine($"//");
            sb.AppendLine($"// This code was generated by a tool.");
            sb.AppendLine($"// TypingsGenerator Version: {Assembly.GetExecutingAssembly().GetName().Version}.");
            sb.AppendLine($"// DecayEngine Versions:");

            foreach (var (name, assembly) in Program.DecayEngineModules)
            {
                sb.Append("//     - ");
                sb.Append(name);
                sb.Append(" ");
                sb.AppendLine(assembly.GetName().Version.ToString());
            }

            sb.AppendLine($"//");
            sb.AppendLine($"// Changes to this file may cause incorrect behavior and will be lost if");
            sb.AppendLine($"// the code is regenerated.");
            sb.AppendLine($"/* tslint:disable */");
            sb.AppendLine();

            List<DocumentableObject> orderedmembers = _members.OrderByDescending(member => member, new DocumentableObjectTypeComparer()).ToList();
            for (int i = 0; i < orderedmembers.Count; i++)
            {
                sb.AppendLine(orderedmembers[i].ToString(0));
                if (i < orderedmembers.Count - 1)
                {
                    sb.Append("\n");
                }
            }

            return sb.ToString().TrimEnd();
        }
    }
}